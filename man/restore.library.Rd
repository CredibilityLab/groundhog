% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/restore.library.R
\name{restore.library}
\alias{restore.library}
\title{Restore version of packages in personal library replaced by groundhog.}
\usage{
restore.library(days)
}
\arguments{
\item{days}{an optional numeric argument used to choose among alternative restore points.
When \code{days} is set, groundhog restores the personal library to the  most recent restore point, that
is at least \code{days} days ago. For example, if there are two restore points: one from today, and one from 7 days ago,
setting \code{days=3} would restore to the latter, and setting \code{days=8} would result in an error.
\code{days = -1} will restore back to the oldest restore point available.}
}
\description{
Instantaneously reverse installations and removals of packages in the
default personal library (\code{libPaths()[1]}) made by groundhog, when installing different versions
of those packages.
}
\details{
When groundhog installs a package, it installs it into groundhog's library.
To find the location of this folder: \code{get.groundhog.folder()}.
Groundhog then immediately moves the installed package (and its dependencies)
to the default personal library (to find its location: \code{.libPaths()[1]}).
Altering the packages in this folder is important for two main reasons. First,
R Studio often loads packages from that library before users run any code, creating
version conflicts that cannot be avoided when attempting to load other versions of those
packages with \code{groundhog}. Second, code often runs processes in other instances, for
example when doing parallel processing. Those background processes will also look for
packages in the default personal folder. Because the personal library can only hold
one version of a given package, before moving new packages in, groundhog moves
any existing other versions of those packages out, to another directory (a local archive).
Those files are not deleted, just moved, making it easy and fast to recover.
When the first change in the personal folder is made on a given calendar date,
Groundhog makes a list of all packages available in the personal folder before such change,
creating a 'restore point'. With \code{restore.library()} groundhog looks up that set of packages
removes any packages in the personal library which were not in that restore points, and
moves back any packages that were available but are not available now. This process will
typically take substantially less than 10 seconds. Note that there is only one restore point
per calendar date, so after using \code{groundhog.library} on a given day, so one effectively restores
the personal library to how it was before \emph{any} changes were made to it that day with groundhog.
Restore points are saved permanently and can be restored at any point.
To view saved restore dates view the hidden dataframe \code{.available.restore.points}.
To choose among them use the \code{days} argument in \code{restore.library}. The default is to restore
based on the most recent restore points, so if a user installs groundhog, tests it, and wants to
undo all changes made by groundhog, the default behavior will achieve this goal.
}
\examples{
\dontrun{
restore.library()
restore.library(7)
restore.library(-1)
}

}
