% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/restore.library.R
\name{restore.library}
\alias{restore.library}
\title{Restore version of packages in personal library replaced by groundhog.}
\usage{
restore.library(minutes = -Inf, date = "1970-01-01")
}
\arguments{
\item{minutes}{Integer. If you want to restore only recently modified packages,
specify the number of minutes you want to restore. For example, if you use \code{minutes=60}, it will only
restore packages replaced within the last hour.}

\item{date}{Date. Alternatively, you can specify the date you want to return to, all packages replaced
since that date will be returned to their pre-groundhog version.}
}
\description{
When groundhog installs a package, it saves two copies of it.
One goes on the stable groundhog library (to find its location: \code{get.groundhog.folder()})
the other goes to the default personal library (to find its location: \code{.libPaths()[1]}.
Because the personal library can only hold one version of a package, ground replaces the
version in the personal library, but, it makes a copy. If you wish to return to the version
of a package you had prior to using groundhog, you can run \code{restore.libary()} and that backup
copy will be saved again in the personal library. The optional parameters \code{date} and \code{minutes}
allow reversing a subset of all replacements groundhog has done.
The main reason to use this function is if you switch back and forth between using groundhog.library()
and library() and at some point you run into an incompatibility issue, namely, when you call on library(pkg)
you may get a warning or error that a dependency is outdated. You could then either rely on groundhog.library(pkg,date)
to prevent that, or if you can restore the previous versions running \code{restore.library()}
}
\details{
#'
}
\examples{
\dontrun{
restore.library()
restore.library(minutes=90)
}

}
