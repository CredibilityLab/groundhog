% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/disable.packages.R
\name{disable.packages}
\alias{disable.packages}
\title{Disable packages previously installed without groundhog to avoid conflicts when loading via groundhog}
\usage{
disable.packages(packages)
}
\arguments{
\item{packages}{(optional) character vector with name of packages to be disabled. If left blank,
all user-installed packages are disabled.}
}
\description{
To avoid version conflicts between the version of the package \code{groundhog} is trying
to load, and the version R Studio loads automatically from the local library, you can
disable all packages in the default local library. This action is fully and instantaneously
reversible, but if you rely on groundhog to load packages you may not need to ever reverse it.
To re-enable all packages simply  run \code{enable.packages()}
}
\details{
Packages installed with \code{install.packages()} are saved in directories with the name of the package.
When you run \code{disable.packages()} the directories of the specified packages (or all directories if none
is specified) are renamed, adding the string \verb{_DISABLED}.
This prevents R Studio from loading those packages #' automatically. The packages are still
listed when running \code{installed.packages()} but they are not #' actually available to be
used (e.g., #' using \code{library()} will fail to load them. When the #' command
\code{enable.packages()} is run, all #' folders are renamed back, eliminated the term \verb{_DISABLED}
and they are again loadable by R Studio and by users with the \code{library()} command.
}
\examples{
\dontrun{
disable.packages()
disable.packages('dplyr')
}
}
\seealso{
\code{\link[=enable.packages]{enable.packages()}}
}
